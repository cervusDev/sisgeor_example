// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Projects {
  id Int @id @default(autoincrement())

  team   Team
  name   String
  status Status

  calendar    Json   @default("{}")
  description String

  endDate   DateTime
  startDate DateTime

  Resource Resource[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("projetos")
}

model Resource {
  id Int @id @default(autoincrement())

  analytics SN
  calendar  Json @default("{}")

  name   String
  office String

  priceDay  String
  priceWeek String
  contract  Contract

  Projects Projects[]
  Vacation Vacation[]
  Comparison Comparison[]
  DayOffsResource DayOffsResource[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("recursos")
}

model Comparison {
  id Int @id @default(autoincrement())

  resourceId Int
  Resource Resource @relation(fields: [resourceId], references: [id])

  calendar Json @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("comparacoes")
}

model Vacation {
  id Int @id @default(autoincrement())

  description String

  resourceId Int
  Resource Resource @relation(fields: [resourceId], references: [id])

  startDate DateTime?
  endDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ferias")
}

model DayOff {
  id Int @id @default(autoincrement())

  ibge      Int
  cidade    String
  uf        String

  DayOffsResource DayOffsResource[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DayOffsResource {
  id Int @id @default(autoincrement())

  day Int
  month Int
  uf String
  name String

  dayoffId Int
  DayOff DayOff @relation(fields: [dayoffId], references: [id])

  resourceId Int
  Resource Resource @relation(fields: [resourceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// enums
enum Team {
  ti
  dados
  design
  desenvolvimento
}

enum Status {
  previsto
  cancelado
  concluido
  andamento
  planejado
}

enum SN {
  S
  N
}

enum Contract {
  fixo
  parceiro
}
